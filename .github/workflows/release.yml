name: Release Manifest Parser Go module new version

on:
  workflow_dispatch:
    inputs:
      version:
        required: false
        default: ''
        description: Optional version to release. If not provided, the next patch version will be used.
      prerelease:
        description: Mark this release as a prerelease
        required: false
        default: 'false'
        type: boolean

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # need full history for tags

      - name: Determine new version
        id: newver
        run: |
          raw="${{ github.event.inputs.version }}"

          if [ -n "$raw" ]; then
            # Ensure 'v' prefix
            if [[ "$raw" == v* ]]; then
              normalized="$raw"
            else
              normalized="v$raw"
            fi
            echo "Using provided version: $normalized"
            echo "new_version=$normalized" >> $GITHUB_ENV
            exit 0
          fi

          # No input: bump patch of latest tag
          git fetch --tags
          latest=$(git describe --tags --abbrev=0)
          bare=${latest#v}

          IFS=. read major minor patch <<< "$bare"
          patch=$((patch + 1))
          new="v${major}.${minor}.${patch}"

          echo "Latest tag is ${latest}, bumping patch to ${new}"
          echo "new_version=${new}" >> $GITHUB_ENV

      - name: Create and push Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${{ env.new_version }}" -m "Release ${{ env.new_version }}"
          git push origin "${{ env.new_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_version }}
          release_name: Release ${{ env.new_version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
